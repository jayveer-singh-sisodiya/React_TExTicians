{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayve\\\\react\\\\myreact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/about\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enable or not \n  const [btnMode, setBtnMode] = useState(\"dark\");\n  let toggelMode = () => {\n    if (mode === \"light\") {\n      setMode = \"dark\";\n    } else {\n      setMode = \"light\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"TextUtils\",\n      about: \"About Us\",\n      toggelMode: toggelMode,\n      mode: mode,\n      btnMode: btnMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        heading: \"Enter the text to analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"yQNzuiDzGPFABMEVlP7QygKBXJM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","TextForm","About","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","btnMode","setBtnMode","toggelMode","children","title","about","fileName","_jsxFileName","lineNumber","columnNumber","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/jayve/react/myreact/src/App.js"],"sourcesContent":["\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/about\";\nimport { useState } from \"react\";\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enable or not \n  const [btnMode,setBtnMode] = useState(\"dark\"); \n let toggelMode = ( ) =>\n  {\n    if(mode === \"light\")\n    {\n      setMode = \"dark\";\n    }\n    else\n    {\n      setMode = \"light\"\n    }\n  }\n  return (\n    <>\n    <Navbar title=\"TextUtils\" about =\"About Us\" toggelMode={toggelMode} mode={mode} btnMode={btnMode}></Navbar>\n    <div className=\"container\">\n      <TextForm heading =\"Enter the text to analyze\"></TextForm>\n    </div>\n    <About></About>\n   </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAO,WAAW;AAClB,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACS,OAAO,EAACC,UAAU,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC;EAC9C,IAAIW,UAAU,GAAGA,CAAA,KAChB;IACE,IAAGJ,IAAI,KAAK,OAAO,EACnB;MACEC,OAAO,GAAG,MAAM;IAClB,CAAC,MAED;MACEA,OAAO,GAAG,OAAO;IACnB;EACF,CAAC;EACD,oBACEN,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACAV,OAAA,CAACL,MAAM;MAACgB,KAAK,EAAC,WAAW;MAACC,KAAK,EAAE,UAAU;MAACH,UAAU,EAAEA,UAAW;MAACJ,IAAI,EAAEA,IAAK;MAACE,OAAO,EAAEA;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAC3GhB,OAAA;MAAKiB,SAAS,EAAC,WAAW;MAAAP,QAAA,eACxBV,OAAA,CAACJ,QAAQ;QAACsB,OAAO,EAAE;MAA2B;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,eACNhB,OAAA,CAACH,KAAK;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACd,CAAC;AAEN;AAACZ,EAAA,CAxBQD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AA0BZ,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}