{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayve\\\\react\\\\myreact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/about\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enable or not \n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const [theme, setTheme] = useState(\"dark\");\n  const [btnMode, setBtnMode] = useState(\"dark\");\n  const clickDark = () => {\n    setTheme(\"dark\");\n    setBtnMode(\"light\");\n    document.body.style.color = \"white\";\n    document.body.style.backgroundColor = \"#272727\";\n    showAlert(\"Dark mode is enabled\", \"primary\");\n  };\n  const changeMode = () => {\n    if (theme === \"dark\") {\n      setTheme(\"dark\");\n      setBtnMode(\"light\");\n      document.body.style.color = \"white\";\n      document.body.style.backgroundColor = \"#272727\";\n      showAlert(\"Dark mode is enabled\", \"primary\");\n    } else if (mode === \"theme\") {\n      setMode(\"light\");\n      setBtnMode(\"dark\");\n      document.body.style.color = \"black\";\n      document.body.style.backgroundColor = \"White\";\n      showAlert(\"Light mode is enabled\", \"success\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"TextUtils\",\n      about: \"About Us\",\n      changeMode: changeMode,\n      theme: theme,\n      clickDark: clickDark,\n      mode: mode,\n      btnMode: btnMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        heading: \"Enter the text to analyze\",\n        mode: mode,\n        btnMode: btnMode,\n        clickDark: clickDark,\n        showAlert: showAlert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(About, {\n      changeMode: changeMode,\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"oeIPhj+6oEu43jAmQVJiRfUM63Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","TextForm","About","useState","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","alert","setAlert","showAlert","message","type","msg","setTimeout","theme","setTheme","btnMode","setBtnMode","clickDark","document","body","style","color","backgroundColor","changeMode","children","title","about","fileName","_jsxFileName","lineNumber","columnNumber","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/jayve/react/myreact/src/App.js"],"sourcesContent":["\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/about\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enable or not \n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) =>\n  {\n      setAlert({\n        msg :message,\n        type:type\n      })\n      setTimeout(()=>\n      {\n         setAlert(null) \n      },1500\n      )\n  }\n  const [theme,setTheme] = useState(\"dark\")\n  const [btnMode,setBtnMode] = useState(\"dark\"); \n  const clickDark = () =>\n    {\n      setTheme (\"dark\");\n      setBtnMode (\"light\");\n      document.body.style.color = \"white\";\n      document.body.style.backgroundColor = \"#272727\";\n      showAlert(\"Dark mode is enabled\",\"primary\")\n\n    }\n  const changeMode = ( ) =>\n  {\n    if(theme === \"dark\")\n    {\n      setTheme (\"dark\");\n      setBtnMode (\"light\");\n      document.body.style.color = \"white\";\n      document.body.style.backgroundColor = \"#272727\";\n      showAlert(\"Dark mode is enabled\",\"primary\")\n\n    }\n    else if (mode === \"theme\")\n    {\n      setMode  (\"light\");\n      setBtnMode  (\"dark\");\n      document.body.style.color = \"black\";\n      document.body.style.backgroundColor = \"White\";\n      showAlert(\"Light mode is enabled\",\"success\")\n    }\n  }\n\n  \n  return (\n    <>\n    <Navbar title=\"TextUtils\" about =\"About Us\" changeMode={changeMode} theme={theme}  clickDark={clickDark} mode={mode} btnMode={btnMode}></Navbar>\n    <Alert alert={alert}></Alert>\n    <div className=\"container\">\n      <TextForm heading =\"Enter the text to analyze\" mode={mode} btnMode={btnMode} clickDark={clickDark} showAlert={showAlert}></TextForm>\n    </div>\n    <About changeMode={changeMode} mode={mode}></About>\n   </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}